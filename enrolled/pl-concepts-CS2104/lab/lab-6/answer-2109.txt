Q1
  let x=0 in
  let x=(let y=2 in y+x) 
  in x*x
  As Haskell's let construct are recursive, above is
  actually equivalent to
  ==>  let x=0 in
       let x=2+x
       in x*x
  The 2nd x goes into a loop when it is being evaluated.
  Hence, answer is E.
  
 Q2
  let x=2 in
  let y=2+x in 
  y+x
  ==> let x=2 in
      let y=2+2 in 
      y+x
  ==> 4+2 
  ==> 6
  Hence, answer is (C)

Q3
  t f x = f (f (f x))

  t (t (\x -> 1+x)) 1  

  Firstly:
     t (\x -> 1+x) x 
	 ==> (\x -> 1+x) ((\x -> 1+x) ((\x -> 1+x) x)))
	 ==> (\x -> 1+x) ((\x -> 1+x) ((1+x)))
	 ==> (\x -> 1+x) (1+(1+x))
	 ==> 1+(1+(1+x))
	 ==> 3+x
 Hence:
   t (t (\x -> 1+x)) 1  
   ==> t (\x -> 3+x) 1
   ==> (\x -> 3+x) ( (\x -> 3+x) ((\x -> 3+x) 1)))
   ==> (\x -> 3+x) ( (\x -> 3+x) (3+1)))
   ==> (\x -> 3+x) ( 3+(3+1))
   ==> 3+(3+(3+1))
   ==> 10
 Answer : B
 Note that though I illustrate the evaluation using strict evaluation
 strategy, Haskell which uses lazy evaluation will givee the same
 outcome for this example. Typically, both strict and lazy evaluation
 would give the same answer if they both terminate for pure expressions.
 However, lazy evaluation strategy would typically terminate more often.
   
Q4
  t (t (\x -> 2+x)) 1

  Firstly:
     t (\x -> 2+x) x 
	 ==> 2+(2+(2+x))
	 ==> 6+x
  Hence:
   t (t (\x -> 2+x)) 1  
	 ==> 6+(6+(6+1))
	 ==> 19
 Answer : E

Q5
  From:
   t f x = f (f (f x))
   t f = \x -> f (f (f x))
  Answer : (D)


Q6
   q f x = f (f x)
   r     = q q 
   
   Now q (\x -> 1+x) x 
       = (\x -> 1+x) ((\x -> 1+x) x))
       = (\x -> 1+x) (1+x)
	   = 1+(1+x)
	   = 2+x
  Hence : q (\x -> 1+x) = (\x -> 2+x)
  
  Also:
   r f x = q q f x
         = q (q f) x
		 = q (\x -> f(f(x))) x
		 = (\x -> f(f(x))) ((\x -> f(f(x))) x)
		 = (\x -> f(f(x))) (f(f(x)))
		 = f(f(f(f(x))))'
  Thus:
   r (q (\x -> 1+x)) 2
   ==> r (\ x -> 2+x) 2
   ==> (\ x -> 2+x) ((\ x -> 2+x) ((\ x -> 2+x) ((\ x -> 2+x) 2)))
   ==> 2+2+2+2+2
   ==> 10
   
   Answer : (B)


Q7
  q (r (\x -> 1+x)) 2
  
  Now: r (\x -> 1+x) x = (\x -> 1+x) ((\x -> 1+x) ((\x -> 1+x) ((\x -> 1+x) x)))
            = 4+x
  Thus:
    q (r (\x -> 1+x)) 2
	==> q (\x -> 4+x) 2
	==>  (\x -> 4+x) ( (\x -> 4+x) (2))
	==> 4+(4+2))
	==> 10
	
   Answer : (B)


Q8
   q f x = f (f x)
   r     = q q 
   
   From q :: (A->A) -> A -> A
          :: (A->A) -> (A->A)
   Since r = q q
   As it is polymorphic, we can let 2nd q to have type:
     (A1->A1) -> (A1->A1)
   The application of q q with A=A1->A1
   would result in:
      (A1->A1) -> (A1->A1)
   Hence r:: (A1->A1) -> (A1->A1)
   
   Answer : (E)
   
Q9
  f x a = if x==0 then a
          else f (x-1) (a+2)
  f 10 5
  ==> f 9 (5+2)
  ==> f 8 (5+2*2)
       :
  ==> f 0 (5+2*10)
  ==> 25
  
  Answer : (C)

Q10

  g x = if x==0 then 0
        else 2 + g (x-1) 
		
  g 15 
  ==> 2+ (g 14)
  ==> 2*2+ (g 13)
       :
  ==> 2*15+ (g 0)
  ==> 30+0
  ==> 30
  
 Answer : (D)

Q11

  g (-1))
  ==> 2+(g (-2))
  ==> 2*2+(g (-3))
  ==> 2*3+(g (-4))
  ==> 2*4+(g (-5))
       :  
 (never meet base case of 0 assuming infinite precision integer)
  
 Answer : (E)
  


Q12

  h n x y z = 
     if (n::Int)==0 then (x,y,z)
     else h (n-1) y z x 

  h 5 1 2 3
  ==> h 4 2 3 1
  ==> h 3 3 1 2
  ==> h 2 1 2 3
  ==> h 1 2 3 1
  ==> h 0 3 1 2
  ==> (3,1,2)
  
 Answer : (C)

Q13
 As the permutation repeats every 3-steps. we have:
 
 h 50 1 2 3  
 ==> h (50-(3*?)) 1 2 3
 
 ==> h (50-(3*16)) 1 2 3
 ==> h (50-49) 2 3 1
 ==> h (50-50) 3 1 2
 ==> (3,1,2)
  
 Answer : (C)

Q14

 The type of h is :: Int -> A -> A -> A -> (A,A,A)
 where the 3 parameters need to be of the same type.
 As a result, the expression cannot be evaluated in Haskell
 
  h 2 1 'a' 3

 Answer : (E)

 In dynamically typed langage, like Python, we would
 be able have executed:
 
  h 2 1 'a' 3
  ==> h 1 'a' 3 1
  ==> h 0 3 1 'a'
  ==> (3,1,'a')
  
  We will award 1/2 mark for this answer for partial correctness.
  
Q15

  h2 f r xs = 
     case xs of
       [] -> r
       (y:ys) -> (f y):(h2 f r ys) 

 (h2 (+1) [1,2,3] [9])
 ==> ((+1) 9):(h2 (+1) [1,2,3] [])
 ==> ((+1) 9):[1,2,3] 
 ==> [10,1,2,3]
 
 Answer : (C)

Q16

 (h2 (+1) [9] [1,2,3])
 ==> ((+1) 1):(h2 (+1) [9] [2,3])
 ==> ((+1) 1):(((+1) 2) : (h2 (+1) [9] [3]))
 ==> ((+1) 1):(((+1) 2) : (((+1)3): (h2 (+1) [9] [])))
 ==> ((+1) 1):(((+1) 2) : (((+1)3): ([9])))
 ==> 2:3:4:[9] 
 ==> [2,3,4,9]
 
 Answer : (B)

Q17

  h2 f r xs = 
     case xs of
       [] -> r
       (y:ys) -> (f y):(h2 f r ys) 

 On the type, we can figure that xs::[A]
 Also, f::A->B
 The result of fully applied h2 is als [B]
 which means that r::[B] also.
 Hence, we have  h2 :: (A->B) -> [B] -> [A] -> [B]
 
 Answer : (B)

Q18

  h3 f x = 
      let a = (f x) 
      in a : (h3 f a)

 length(h3 (+1) 0)
 ==> length(((+1) 0):(h3 (+1) 1))
 ==> length(1:(h3 (+1) 1))
 ==> length(1:2:(h3 (+1) 2))
 ==> length(1:2:3:(h3 (+1) 3))
  # an infinite list..
    looping code
 
 Answer : (E)

Q19

 length(take 5 (h3 (+1) 0))
 ==>    :
 ==> length(take 5 (1:2:3:4:5:16h3 (+1) 6))
 ==> length( 1:2:3:4:5:[])
 ==> 5

 Answer : (C)

Q20

 h3 f x = 
      let a = (f x) 
      in a : (h3 f a)

 We can assume  x::A,
 then can assume f::A-> B
 From the outcome of fully-applied h3, we will get [B]
 However, a::B is also placed in the x parameter.
 Hence A=B.
 Thus h3::(A->A) -> A -> [A]
 
 Answer : (B)

 Some of you may have missed A=ep, so we 
 will award 1/2 mark for (A) for partial correctness
 
Q21

 goo x = 
   if x<=1 then 1
   else goo (x-1) + (goo (x-1))
   
 goo 4
 ==> r1 + r1 where r1=(goo 3) 
 ==> r1 + r1 where r1=r2+r2 where r2=(goo 2) 
 ==> r1 + r1 where r1=r2+r2 where r2=r3+r3 where r3=(goo 1) 
 ==> r1 + r1 where r1=r2+r2 where r2=r3+r3 where r3=1
 ==> r1 + r1 where r1=r2+r2 where r2=2
 ==> r1 + r1 where r1=2+2=4 where r2=2
 ==> 4+4
 ==> 8
 
 Answer : (C)

Q22

 Let num_goo denotes the number of goo calls 
 num_goo 4 = 1 + 2* (num_goo 3)
   = 1 + 2* (1+2*(num_goo 2))
   = 1 + 2* (1+2*(1+2*num_goo 1))
   = 1 + 2* (1+2*(1+2*1))
   = 1 + 2* (1+2*(3))
   = 1 + 2* (7)
   = 15
   
 Answer : (E)

Q23

 Using let is the simplest since goo (n-1) is duplicated
  
 Answer : (E)

Q24

 h4 f x = (\ f g x -> g (f x) x) (\x -> (f (1::Int)) x) f x
 
 Let us first rename uniquely:
  
 h4 f x = (\ f1 g x1 -> g (f1 x1) x1) (\x2 -> (f (1::Int)) x2) f x
 
 Assume x::A  and f::B->C
 From f (1::Int) x2, we know that B=Int, and C=X->D assuming x2::X
 Thus f = Int -> X -> D
 Within (\x2 -> (f (1::Int)) x2), we can  determine:
      (\x2 -> (f (1::Int)) x2) :: X -> D
 Now from outermost application of
   (\ f1 g x1 -> g (f1 x1) x1)  (\x2 -> (f (1::Int)) x2) f x, 
 we can determine that
   f1::X->D
   g::Int -> X -> D
   x1::A
 From g (f1 x1) x1, we can determine that
 X=A from f1 x1
 D = Int
 
 Thus h4:: (Int -> X -> Int) -> X -> Int
  
 Answer : (C)

Q25

 h4 (+) 2
 ==> (\ f1 g x1 -> g (f1 x1) x1) (\x2 -> ((+) (1::Int)) x2) (+) 2
 ==> (\ f1 g x1 -> g (f1 x1) x1) (\x2 -> ((+) 1 x2) (+) 2
 ==>  (+) ((\x2 -> ((+) 1 x2) 2) 2)  
 ==>  (+) ((+) 1 2) 2)  
 ==> (+) 3 2
 ==> 5
 
 Answer : (D)

Q26

 h4 (*) 2
 ==> (\ f1 g x1 -> g (f1 x1) x1) (\x2 -> ((*) (1::Int)) x2) (*) 2
 ==> (\ f1 g x1 -> g (f1 x1) x1) (\x2 -> ((*) 1 x2) (*) 2
 ==> (*) ((\x2 -> ((*) 1 x2) 2) 2)  
 ==> (*) ((*) 1 2) 2)  
 ==> (*) 2 2
 ==> 4

 Answer : (C)

Q27

  map :: (a->b) -> [a] -> [b]
  foldr :: (a -> r -> r) -> r -> [a] -> r
  h5 g f r xs = foldr g r (map f xs)
  
  h5 (+) (+1) 0 [1..4]
  ==> foldr (+) 0 (map (+1) [1..4])
  ==> foldr (+) 0 ([2,3,4,5])
  ==> 2+(3+(4+(5+0)))
  ==> 14
   
 Answer : (C)

Q28

  h5 (+) (+1) 0 [1..4]
  ==> foldr (+) 0 (map (+1) [1..4])
  ==> foldr (+) 0 ([2,3,4,5]) -- 4 new : generated here
  ==> 2+(3+(4+(5+0)))
  ==> 14
 
 Answer : (A)

Q29

 h5 (++) (\c -> [c]) "t" "hello"
 ==> foldr (++) "t" (map (\c -> [c]) "hello")
 ==> foldr (++) "t" (["h","e","l","l","o"])
 ==> "h" ++ ("e" ++ ("l" ++ ("l"++ ("o" ++ "t"))))
 ==> "hellot"

 Answer : (E)

Q30

  h6 f xs = foldr (&&) True ([f x| x <- xs])
  g2 ys xs = [y| y<-ys, h6 (\ x->x/=y) xs]
  
  (g2 "hello" "oe")
  ==> [y| y<-"hello", h6 (\ x->x/=y) "oe"]
  ==> [y| y<-"hello", foldr (&&) True [x/=y| x<- "oe"]]
  ==> "hll"
  
 Answer : (D)

Q31

 From rhs of g2, we can assume and infer:
    ys::[A]
	xs::[B]
	Eq A and A=B
 Hence g2:: Eq A => [A] -> [A] -> [A]
 
 Answer : (A)

Q32

 Enumerating the elements of ys, and
 only keeping those that are not == to any of those in xs.
 Hence, this is list difference
 
 Answer : (C)

Q33

 h7 m1 m2 = do 
             x <- m1
             y <- m2
             return (x,y)
			 
 May assume m1::m a and m2 :: m b,
 where do notation is returning m (a,b).
 
 Hence : h7 :: Monad m => m a -> m b -> m (a,b)
 
 Answer : (B)

Q34

 h7 [1,2] "ab"
 ==> do 
       x <- [1,2]
       y <- "ab"
       return (x,y)
 ==> [(1,'a'),(1,'b'),(2,'a'),(2,'b')]

 Answer : (A)


Q35

 (h7 (Just [1,2]) (Just "ab")
 ==> do 
       x <- Just [1,2]
       y <- Just "ab"
       return (x,y) 
 ==> Just ([1,2],"ab")
 
  Answer : (E)

Q36

 (h7 (+ (1::Int)) (* (3::Int)) 1)
 
  Here :: Monad m ==> m a = Int -> a
  
  Firstly,
  (h7 (+ (1::Int)) (* (3::Int))
   ==> do 
       x <- (+ (1::Int))  // (+ 1)
       y <- (* (3::Int))  // (* 3)
       return (x,y)       // \ x -> (+ 1 x, * 3 x)
   ==> (\ x -> (+1 x, * 3 x)) 1
   ==> (+ 1 1, * 3 1)
   ==> (2,3)
   
 Answer : (B)

Q37

  (h7 (+ (1::Int)) (* (3::Int)) x)
   ==> (do 
         x <- (+ (1::Int))  // (+ 1)
         y <- (* (3::Int))  // (* 3)
         return (x,y)) x
   ==> (\ x -> (+ 1 x, * 3 x)) x
   ==> (+ 1 x, * 3 x)
   
 Answer : (B)

Q38


 Recall : 
   h7 :: Monad m => m a -> m b -> m (a,b)

 hoo f1 f2 = h7 (f1 (1::Int)) (f2 (3::Int))
 
 f1::Int -> m a
 f2::Int -> m b
 
 
 Hence : hoo :: Monad m => (Int -> m a) -> (Int -> m b) -> (Int -> m (a,b))
 
 Answer : (E)

Q39

 As the monad type is still generic, m is none of the above
 
 Answer : (E)

Q40

 (D) is not true, since arrays are lazily evaluated 
 and not evaluated in some particular order.
 
 Answer : (D)


Q41
 Since hoo did not make use of a specific monad, it is
 currently using only the generic versions of >>= and return.
 
 Hence, no specific implementation is required.
 
 If we had used an implementation of Monad,
 say [a]
 
 Its implementation:
  return a = [a]
  m1 >>= f = concat [ f x| x <- m1]
 
 If we had used: b -> a (for some b type)
 
  return a = \ b -> a
  m1 >>= f = \ b -> let a = m1 b in
                    f a b
				
 Given that this question wasn't correctly formed,
 we will give everyone 5 marks for it.
 Those who explicitly spotted this problem will get
 a bonus of 5 more marks
 
Answers
=======
ECBEDBBECD
ECCECBBECB
CEECDCCAED
ACBAEBBEED

